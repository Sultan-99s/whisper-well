# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pyright: reportUnusedImport=false
# fmt: off
from __future__ import annotations

# global imports for type checking
from builtins import bool as _bool
from builtins import int as _int
from builtins import float as _float
from builtins import str as _str
import sys
import decimal
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Sequence,
    Callable,
    ClassVar,
    NoReturn,
    TypeVar,
    Generic,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)
from typing_extensions import TypedDict, Literal


LiteralString = str
# -- template actions.py.jinja --
from typing import TypeVar
import warnings

from . import types, errors, bases
from ._compat import model_parse
from ._constants import CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED

if TYPE_CHECKING:
    from .client import Prisma
    from .bases import _PrismaModel


_PrismaModelT = TypeVar('_PrismaModelT', bound='_PrismaModel')


class SlotActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: Prisma, model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.Slot]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = await Slot.prisma().query_raw(
            'SELECT * FROM Slot WHERE id = $1',
            1103527590,
        )
        ```
        """
        return await self._client.query_raw(query, *args, model=self._model)

    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.Slot
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await Slot.prisma().query_first(
            'SELECT * FROM Slot WHERE date = $1',
            'dhheabfhf',
        )
        ```
        """
        return await self._client.query_first(query, *args, model=self._model)

    async def create(
        self,
        data: types.SlotCreateInput,
        include: Optional[types.SlotInclude] = None
    ) -> _PrismaModelT:
        """Create a new Slot record.

        Parameters
        ----------
        data
            Slot record data
        include
            Specifies which relations should be loaded on the returned Slot model

        Returns
        -------
        prisma.models.Slot
            The created Slot record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a Slot record from just the required fields
        slot = await Slot.prisma().create(
            data={
                # data to create a Slot record
                'date': 'ggciceaie',
                'time_slot': 'bbehjachib',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def create_many(
        self,
        data: List[types.SlotCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple Slot records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of Slot record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await Slot.prisma().create_many(
            data=[
                {
                    # data to create a Slot record
                    'date': 'cadfabfehe',
                    'time_slot': 'dgiiaaijj',
                },
                {
                    # data to create a Slot record
                    'date': 'bfaiacjjfc',
                    'time_slot': 'eigcfgbif',
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if skip_duplicates and self._client._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._client._active_provider, 'create_many_skip_duplicates')

        resp = await self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.SlotWhereUniqueInput,
        include: Optional[types.SlotInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single Slot record.

        Parameters
        ----------
        where
            Slot filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned Slot model

        Returns
        -------
        prisma.models.Slot
            The deleted Slot record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        slot = await Slot.prisma().delete(
            where={
                'id': 1062517886,
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def find_unique(
        self,
        where: types.SlotWhereUniqueInput,
        include: Optional[types.SlotInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique Slot record.

        Parameters
        ----------
        where
            Slot filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Slot model

        Returns
        -------
        prisma.models.Slot
            The found Slot record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        slot = await Slot.prisma().find_unique(
            where={
                'id': 267834847,
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return model_parse(self._model, result)

    async def find_unique_or_raise(
        self,
        where: types.SlotWhereUniqueInput,
        include: Optional[types.SlotInclude] = None
    ) -> _PrismaModelT:
        """Find a unique Slot record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            Slot filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Slot model

        Returns
        -------
        prisma.models.Slot
            The found Slot record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        slot = await Slot.prisma().find_unique_or_raise(
            where={
                'id': 180171308,
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.SlotWhereInput] = None,
        cursor: Optional[types.SlotWhereUniqueInput] = None,
        include: Optional[types.SlotInclude] = None,
        order: Optional[Union[types.SlotOrderByInput, List[types.SlotOrderByInput]]] = None,
        distinct: Optional[List[types.SlotScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple Slot records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of Slot records returned
        skip
            Ignore the first N results
        where
            Slot filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Slot model
        order
            Order the returned Slot records by any field
        distinct
            Filter Slot records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.Slot]
            The list of all Slot records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 Slot records
        slots = await Slot.prisma().find_many(take=10)

        # find the first 5 Slot records ordered by the time_slot field
        slots = await Slot.prisma().find_many(
            take=5,
            order={
                'time_slot': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [model_parse(self._model, r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.SlotWhereInput] = None,
        cursor: Optional[types.SlotWhereUniqueInput] = None,
        include: Optional[types.SlotInclude] = None,
        order: Optional[Union[types.SlotOrderByInput, List[types.SlotOrderByInput]]] = None,
        distinct: Optional[List[types.SlotScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single Slot record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Slot filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Slot model
        order
            Order the returned Slot records by any field
        distinct
            Filter Slot records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Slot
            The first Slot record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Slot record ordered by the booked field
        slot = await Slot.prisma().find_first(
            skip=1,
            order={
                'booked': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None

        return model_parse(self._model, result)

    async def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.SlotWhereInput] = None,
        cursor: Optional[types.SlotWhereUniqueInput] = None,
        include: Optional[types.SlotInclude] = None,
        order: Optional[Union[types.SlotOrderByInput, List[types.SlotOrderByInput]]] = None,
        distinct: Optional[List[types.SlotScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single Slot record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Slot filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Slot model
        order
            Order the returned Slot records by any field
        distinct
            Filter Slot records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Slot
            The first Slot record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Slot record ordered by the created_at field
        slot = await Slot.prisma().find_first_or_raise(
            skip=1,
            order={
                'created_at': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update(
        self,
        data: types.SlotUpdateInput,
        where: types.SlotWhereUniqueInput,
        include: Optional[types.SlotInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single Slot record.

        Parameters
        ----------
        data
            Slot record data specifying what to update
        where
            Slot filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned Slot model

        Returns
        -------
        prisma.models.Slot
            The updated Slot record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        slot = await Slot.prisma().update(
            where={
                'id': 836760821,
            },
            data={
                # data to update the Slot record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def upsert(
        self,
        where: types.SlotWhereUniqueInput,
        data: types.SlotUpsertInput,
        include: Optional[types.SlotInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            Slot filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned Slot model

        Returns
        -------
        prisma.models.Slot
            The created or updated Slot record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        slot = await Slot.prisma().upsert(
            where={
                'id': 595337866,
            },
            data={
                'create': {
                    'id': 595337866,
                    'date': 'bfaiacjjfc',
                    'time_slot': 'eigcfgbif',
                },
                'update': {
                    'date': 'bfaiacjjfc',
                    'time_slot': 'eigcfgbif',
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update_many(
        self,
        data: types.SlotUpdateManyMutationInput,
        where: types.SlotWhereInput,
    ) -> int:
        """Update multiple Slot records

        Parameters
        ----------
        data
            Slot data to update the selected Slot records to
        where
            Filter to select the Slot records to update

        Returns
        -------
        int
            The total number of Slot records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all Slot records
        total = await Slot.prisma().update_many(
            data={
                'id': 790425851
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.SlotWhereInput] = None,
        cursor: Optional[types.SlotWhereUniqueInput] = None,
    ) -> int:
        """Count the number of Slot records present in the database

        Parameters
        ----------
        select
            Select the Slot fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Slot filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.SlotCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await Slot.prisma().count()

        # results: prisma.types.SlotCountAggregateOutput
        results = await Slot.prisma().count(
            select={
                '_all': True,
                'date': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.SlotCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.SlotWhereInput] = None,
        cursor: Optional[types.SlotWhereUniqueInput] = None,
    ) -> types.SlotCountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.SlotCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.SlotWhereInput] = None,
        cursor: Optional[types.SlotWhereUniqueInput] = None,
    ) -> Union[int, types.SlotCountAggregateOutput]:
        """Count the number of Slot records present in the database

        Parameters
        ----------
        select
            Select the Slot fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Slot filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.SlotCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await Slot.prisma().count()

        # results: prisma.types.SlotCountAggregateOutput
        results = await Slot.prisma().count(
            select={
                '_all': True,
                'time_slot': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.SlotCountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.SlotWhereInput] = None
    ) -> int:
        """Delete multiple Slot records.

        Parameters
        ----------
        where
            Optional Slot filter to find the records to be deleted

        Returns
        -------
        int
            The total number of Slot records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all Slot records
        total = await Slot.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.SlotScalarFieldKeys'],
        *,
        where: Optional['types.SlotWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.SlotAvgAggregateInput'] = None,
        sum: Optional['types.SlotSumAggregateInput'] = None,
        min: Optional['types.SlotMinAggregateInput'] = None,
        max: Optional['types.SlotMaxAggregateInput'] = None,
        having: Optional['types.SlotScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.SlotCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.SlotScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.SlotScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.SlotGroupByOutput']:
        """Group Slot records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar Slot fields to group records by
        where
            Slot filter to select records
        take
            Limit the maximum number of Slot records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.SlotGroupByOutput]
            A list of dictionaries representing the Slot record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group Slot records by booked values
        # and count how many records are in each group
        results = await Slot.prisma().group_by(
            ['booked'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]


class BookingActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: Prisma, model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.Booking]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = await Booking.prisma().query_raw(
            'SELECT * FROM Booking WHERE id = $1',
            2111915288,
        )
        ```
        """
        return await self._client.query_raw(query, *args, model=self._model)

    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.Booking
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await Booking.prisma().query_first(
            'SELECT * FROM Booking WHERE email = $1',
            'bbejhfidcb',
        )
        ```
        """
        return await self._client.query_first(query, *args, model=self._model)

    async def create(
        self,
        data: types.BookingCreateInput,
        include: Optional[types.BookingInclude] = None
    ) -> _PrismaModelT:
        """Create a new Booking record.

        Parameters
        ----------
        data
            Booking record data
        include
            Specifies which relations should be loaded on the returned Booking model

        Returns
        -------
        prisma.models.Booking
            The created Booking record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a Booking record from just the required fields
        booking = await Booking.prisma().create(
            data={
                # data to create a Booking record
                'email': 'bgeecijdgg',
                'slotId': 1388290519,
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def create_many(
        self,
        data: List[types.BookingCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple Booking records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of Booking record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await Booking.prisma().create_many(
            data=[
                {
                    # data to create a Booking record
                    'email': 'bgehebiafc',
                    'slotId': 1675546029,
                },
                {
                    # data to create a Booking record
                    'email': 'bhghchehcc',
                    'slotId': 326272115,
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if skip_duplicates and self._client._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._client._active_provider, 'create_many_skip_duplicates')

        resp = await self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.BookingWhereUniqueInput,
        include: Optional[types.BookingInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single Booking record.

        Parameters
        ----------
        where
            Booking filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned Booking model

        Returns
        -------
        prisma.models.Booking
            The deleted Booking record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        booking = await Booking.prisma().delete(
            where={
                'id': 1343201072,
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def find_unique(
        self,
        where: types.BookingWhereUniqueInput,
        include: Optional[types.BookingInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique Booking record.

        Parameters
        ----------
        where
            Booking filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Booking model

        Returns
        -------
        prisma.models.Booking
            The found Booking record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        booking = await Booking.prisma().find_unique(
            where={
                'id': 675780521,
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return model_parse(self._model, result)

    async def find_unique_or_raise(
        self,
        where: types.BookingWhereUniqueInput,
        include: Optional[types.BookingInclude] = None
    ) -> _PrismaModelT:
        """Find a unique Booking record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            Booking filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Booking model

        Returns
        -------
        prisma.models.Booking
            The found Booking record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        booking = await Booking.prisma().find_unique_or_raise(
            where={
                'id': 744964398,
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.BookingWhereInput] = None,
        cursor: Optional[types.BookingWhereUniqueInput] = None,
        include: Optional[types.BookingInclude] = None,
        order: Optional[Union[types.BookingOrderByInput, List[types.BookingOrderByInput]]] = None,
        distinct: Optional[List[types.BookingScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple Booking records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of Booking records returned
        skip
            Ignore the first N results
        where
            Booking filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Booking model
        order
            Order the returned Booking records by any field
        distinct
            Filter Booking records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.Booking]
            The list of all Booking records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 Booking records
        bookings = await Booking.prisma().find_many(take=10)

        # find the first 5 Booking records ordered by the slotId field
        bookings = await Booking.prisma().find_many(
            take=5,
            order={
                'slotId': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [model_parse(self._model, r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.BookingWhereInput] = None,
        cursor: Optional[types.BookingWhereUniqueInput] = None,
        include: Optional[types.BookingInclude] = None,
        order: Optional[Union[types.BookingOrderByInput, List[types.BookingOrderByInput]]] = None,
        distinct: Optional[List[types.BookingScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single Booking record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Booking filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Booking model
        order
            Order the returned Booking records by any field
        distinct
            Filter Booking records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Booking
            The first Booking record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Booking record ordered by the created_at field
        booking = await Booking.prisma().find_first(
            skip=1,
            order={
                'created_at': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None

        return model_parse(self._model, result)

    async def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.BookingWhereInput] = None,
        cursor: Optional[types.BookingWhereUniqueInput] = None,
        include: Optional[types.BookingInclude] = None,
        order: Optional[Union[types.BookingOrderByInput, List[types.BookingOrderByInput]]] = None,
        distinct: Optional[List[types.BookingScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single Booking record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Booking filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Booking model
        order
            Order the returned Booking records by any field
        distinct
            Filter Booking records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Booking
            The first Booking record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Booking record ordered by the id field
        booking = await Booking.prisma().find_first_or_raise(
            skip=1,
            order={
                'id': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update(
        self,
        data: types.BookingUpdateInput,
        where: types.BookingWhereUniqueInput,
        include: Optional[types.BookingInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single Booking record.

        Parameters
        ----------
        data
            Booking record data specifying what to update
        where
            Booking filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned Booking model

        Returns
        -------
        prisma.models.Booking
            The updated Booking record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        booking = await Booking.prisma().update(
            where={
                'id': 1969681615,
            },
            data={
                # data to update the Booking record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def upsert(
        self,
        where: types.BookingWhereUniqueInput,
        data: types.BookingUpsertInput,
        include: Optional[types.BookingInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            Booking filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned Booking model

        Returns
        -------
        prisma.models.Booking
            The created or updated Booking record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        booking = await Booking.prisma().upsert(
            where={
                'id': 1116175964,
            },
            data={
                'create': {
                    'id': 1116175964,
                    'email': 'bhghchehcc',
                    'slotId': 326272115,
                },
                'update': {
                    'email': 'bhghchehcc',
                    'slotId': 326272115,
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update_many(
        self,
        data: types.BookingUpdateManyMutationInput,
        where: types.BookingWhereInput,
    ) -> int:
        """Update multiple Booking records

        Parameters
        ----------
        data
            Booking data to update the selected Booking records to
        where
            Filter to select the Booking records to update

        Returns
        -------
        int
            The total number of Booking records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all Booking records
        total = await Booking.prisma().update_many(
            data={
                'email': 'igbehcbab'
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.BookingWhereInput] = None,
        cursor: Optional[types.BookingWhereUniqueInput] = None,
    ) -> int:
        """Count the number of Booking records present in the database

        Parameters
        ----------
        select
            Select the Booking fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Booking filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.BookingCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await Booking.prisma().count()

        # results: prisma.types.BookingCountAggregateOutput
        results = await Booking.prisma().count(
            select={
                '_all': True,
                'slotId': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.BookingCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.BookingWhereInput] = None,
        cursor: Optional[types.BookingWhereUniqueInput] = None,
    ) -> types.BookingCountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.BookingCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.BookingWhereInput] = None,
        cursor: Optional[types.BookingWhereUniqueInput] = None,
    ) -> Union[int, types.BookingCountAggregateOutput]:
        """Count the number of Booking records present in the database

        Parameters
        ----------
        select
            Select the Booking fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Booking filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.BookingCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await Booking.prisma().count()

        # results: prisma.types.BookingCountAggregateOutput
        results = await Booking.prisma().count(
            select={
                '_all': True,
                'created_at': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.BookingCountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.BookingWhereInput] = None
    ) -> int:
        """Delete multiple Booking records.

        Parameters
        ----------
        where
            Optional Booking filter to find the records to be deleted

        Returns
        -------
        int
            The total number of Booking records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all Booking records
        total = await Booking.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.BookingScalarFieldKeys'],
        *,
        where: Optional['types.BookingWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.BookingAvgAggregateInput'] = None,
        sum: Optional['types.BookingSumAggregateInput'] = None,
        min: Optional['types.BookingMinAggregateInput'] = None,
        max: Optional['types.BookingMaxAggregateInput'] = None,
        having: Optional['types.BookingScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.BookingCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.BookingScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.BookingScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.BookingGroupByOutput']:
        """Group Booking records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar Booking fields to group records by
        where
            Booking filter to select records
        take
            Limit the maximum number of Booking records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.BookingGroupByOutput]
            A list of dictionaries representing the Booking record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group Booking records by id values
        # and count how many records are in each group
        results = await Booking.prisma().group_by(
            ['id'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]


class UrgentRequestActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: Prisma, model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.UrgentRequest]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = await UrgentRequest.prisma().query_raw(
            'SELECT * FROM UrgentRequest WHERE id = $1',
            1303003706,
        )
        ```
        """
        return await self._client.query_raw(query, *args, model=self._model)

    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.UrgentRequest
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await UrgentRequest.prisma().query_first(
            'SELECT * FROM UrgentRequest WHERE email = $1',
            'bgiggdidbf',
        )
        ```
        """
        return await self._client.query_first(query, *args, model=self._model)

    async def create(
        self,
        data: types.UrgentRequestCreateInput,
        include: Optional[types.UrgentRequestInclude] = None
    ) -> _PrismaModelT:
        """Create a new UrgentRequest record.

        Parameters
        ----------
        data
            UrgentRequest record data
        include
            Specifies which relations should be loaded on the returned UrgentRequest model

        Returns
        -------
        prisma.models.UrgentRequest
            The created UrgentRequest record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a UrgentRequest record from just the required fields
        urgentrequest = await UrgentRequest.prisma().create(
            data={
                # data to create a UrgentRequest record
                'email': 'caaaedabfc',
                'message': 'bigibebcib',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def create_many(
        self,
        data: List[types.UrgentRequestCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple UrgentRequest records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of UrgentRequest record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await UrgentRequest.prisma().create_many(
            data=[
                {
                    # data to create a UrgentRequest record
                    'email': 'bigaiehgcc',
                    'message': 'beeifcbebf',
                },
                {
                    # data to create a UrgentRequest record
                    'email': 'bgcigfahea',
                    'message': 'bcejgaggif',
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if skip_duplicates and self._client._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._client._active_provider, 'create_many_skip_duplicates')

        resp = await self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.UrgentRequestWhereUniqueInput,
        include: Optional[types.UrgentRequestInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single UrgentRequest record.

        Parameters
        ----------
        where
            UrgentRequest filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned UrgentRequest model

        Returns
        -------
        prisma.models.UrgentRequest
            The deleted UrgentRequest record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        urgentrequest = await UrgentRequest.prisma().delete(
            where={
                'id': 835903122,
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def find_unique(
        self,
        where: types.UrgentRequestWhereUniqueInput,
        include: Optional[types.UrgentRequestInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique UrgentRequest record.

        Parameters
        ----------
        where
            UrgentRequest filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned UrgentRequest model

        Returns
        -------
        prisma.models.UrgentRequest
            The found UrgentRequest record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        urgentrequest = await UrgentRequest.prisma().find_unique(
            where={
                'id': 763719779,
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return model_parse(self._model, result)

    async def find_unique_or_raise(
        self,
        where: types.UrgentRequestWhereUniqueInput,
        include: Optional[types.UrgentRequestInclude] = None
    ) -> _PrismaModelT:
        """Find a unique UrgentRequest record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            UrgentRequest filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned UrgentRequest model

        Returns
        -------
        prisma.models.UrgentRequest
            The found UrgentRequest record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        urgentrequest = await UrgentRequest.prisma().find_unique_or_raise(
            where={
                'id': 429995104,
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.UrgentRequestWhereInput] = None,
        cursor: Optional[types.UrgentRequestWhereUniqueInput] = None,
        include: Optional[types.UrgentRequestInclude] = None,
        order: Optional[Union[types.UrgentRequestOrderByInput, List[types.UrgentRequestOrderByInput]]] = None,
        distinct: Optional[List[types.UrgentRequestScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple UrgentRequest records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of UrgentRequest records returned
        skip
            Ignore the first N results
        where
            UrgentRequest filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned UrgentRequest model
        order
            Order the returned UrgentRequest records by any field
        distinct
            Filter UrgentRequest records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.UrgentRequest]
            The list of all UrgentRequest records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 UrgentRequest records
        urgentrequests = await UrgentRequest.prisma().find_many(take=10)

        # find the first 5 UrgentRequest records ordered by the message field
        urgentrequests = await UrgentRequest.prisma().find_many(
            take=5,
            order={
                'message': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [model_parse(self._model, r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.UrgentRequestWhereInput] = None,
        cursor: Optional[types.UrgentRequestWhereUniqueInput] = None,
        include: Optional[types.UrgentRequestInclude] = None,
        order: Optional[Union[types.UrgentRequestOrderByInput, List[types.UrgentRequestOrderByInput]]] = None,
        distinct: Optional[List[types.UrgentRequestScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single UrgentRequest record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            UrgentRequest filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned UrgentRequest model
        order
            Order the returned UrgentRequest records by any field
        distinct
            Filter UrgentRequest records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.UrgentRequest
            The first UrgentRequest record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second UrgentRequest record ordered by the status field
        urgentrequest = await UrgentRequest.prisma().find_first(
            skip=1,
            order={
                'status': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None

        return model_parse(self._model, result)

    async def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.UrgentRequestWhereInput] = None,
        cursor: Optional[types.UrgentRequestWhereUniqueInput] = None,
        include: Optional[types.UrgentRequestInclude] = None,
        order: Optional[Union[types.UrgentRequestOrderByInput, List[types.UrgentRequestOrderByInput]]] = None,
        distinct: Optional[List[types.UrgentRequestScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single UrgentRequest record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            UrgentRequest filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned UrgentRequest model
        order
            Order the returned UrgentRequest records by any field
        distinct
            Filter UrgentRequest records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.UrgentRequest
            The first UrgentRequest record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second UrgentRequest record ordered by the created_at field
        urgentrequest = await UrgentRequest.prisma().find_first_or_raise(
            skip=1,
            order={
                'created_at': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update(
        self,
        data: types.UrgentRequestUpdateInput,
        where: types.UrgentRequestWhereUniqueInput,
        include: Optional[types.UrgentRequestInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single UrgentRequest record.

        Parameters
        ----------
        data
            UrgentRequest record data specifying what to update
        where
            UrgentRequest filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned UrgentRequest model

        Returns
        -------
        prisma.models.UrgentRequest
            The updated UrgentRequest record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        urgentrequest = await UrgentRequest.prisma().update(
            where={
                'id': 1775811865,
            },
            data={
                # data to update the UrgentRequest record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def upsert(
        self,
        where: types.UrgentRequestWhereUniqueInput,
        data: types.UrgentRequestUpsertInput,
        include: Optional[types.UrgentRequestInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            UrgentRequest filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned UrgentRequest model

        Returns
        -------
        prisma.models.UrgentRequest
            The created or updated UrgentRequest record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        urgentrequest = await UrgentRequest.prisma().upsert(
            where={
                'id': 893145566,
            },
            data={
                'create': {
                    'id': 893145566,
                    'email': 'bgcigfahea',
                    'message': 'bcejgaggif',
                },
                'update': {
                    'email': 'bgcigfahea',
                    'message': 'bcejgaggif',
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update_many(
        self,
        data: types.UrgentRequestUpdateManyMutationInput,
        where: types.UrgentRequestWhereInput,
    ) -> int:
        """Update multiple UrgentRequest records

        Parameters
        ----------
        data
            UrgentRequest data to update the selected UrgentRequest records to
        where
            Filter to select the UrgentRequest records to update

        Returns
        -------
        int
            The total number of UrgentRequest records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all UrgentRequest records
        total = await UrgentRequest.prisma().update_many(
            data={
                'id': 995405759
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.UrgentRequestWhereInput] = None,
        cursor: Optional[types.UrgentRequestWhereUniqueInput] = None,
    ) -> int:
        """Count the number of UrgentRequest records present in the database

        Parameters
        ----------
        select
            Select the UrgentRequest fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            UrgentRequest filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.UrgentRequestCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await UrgentRequest.prisma().count()

        # results: prisma.types.UrgentRequestCountAggregateOutput
        results = await UrgentRequest.prisma().count(
            select={
                '_all': True,
                'email': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.UrgentRequestCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.UrgentRequestWhereInput] = None,
        cursor: Optional[types.UrgentRequestWhereUniqueInput] = None,
    ) -> types.UrgentRequestCountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.UrgentRequestCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.UrgentRequestWhereInput] = None,
        cursor: Optional[types.UrgentRequestWhereUniqueInput] = None,
    ) -> Union[int, types.UrgentRequestCountAggregateOutput]:
        """Count the number of UrgentRequest records present in the database

        Parameters
        ----------
        select
            Select the UrgentRequest fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            UrgentRequest filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.UrgentRequestCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await UrgentRequest.prisma().count()

        # results: prisma.types.UrgentRequestCountAggregateOutput
        results = await UrgentRequest.prisma().count(
            select={
                '_all': True,
                'message': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.UrgentRequestCountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.UrgentRequestWhereInput] = None
    ) -> int:
        """Delete multiple UrgentRequest records.

        Parameters
        ----------
        where
            Optional UrgentRequest filter to find the records to be deleted

        Returns
        -------
        int
            The total number of UrgentRequest records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all UrgentRequest records
        total = await UrgentRequest.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.UrgentRequestScalarFieldKeys'],
        *,
        where: Optional['types.UrgentRequestWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.UrgentRequestAvgAggregateInput'] = None,
        sum: Optional['types.UrgentRequestSumAggregateInput'] = None,
        min: Optional['types.UrgentRequestMinAggregateInput'] = None,
        max: Optional['types.UrgentRequestMaxAggregateInput'] = None,
        having: Optional['types.UrgentRequestScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.UrgentRequestCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.UrgentRequestScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.UrgentRequestScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.UrgentRequestGroupByOutput']:
        """Group UrgentRequest records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar UrgentRequest fields to group records by
        where
            UrgentRequest filter to select records
        take
            Limit the maximum number of UrgentRequest records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.UrgentRequestGroupByOutput]
            A list of dictionaries representing the UrgentRequest record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group UrgentRequest records by status values
        # and count how many records are in each group
        results = await UrgentRequest.prisma().group_by(
            ['status'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]



def _select_fields(root: str, select: Mapping[str, Any]) -> str:
    """Helper to build a GraphQL selection string

    This is a work around until field selection is added to the query builder.
    """

    return root + ' {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))


from . import models